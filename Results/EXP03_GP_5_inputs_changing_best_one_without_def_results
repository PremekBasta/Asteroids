if_then_else(compare(add(3, add(add(mul(ARG2, -1), add(mul(mul(mul(mul(mul(add(add(5, 10), add(ARG0, ARG2)), mul(mul(1, ARG1), add(0, ARG0))), mul(add(ARG1, 3), mul(0, 0))), ARG0), mul(mul(10, ARG2), ARG3)), mul(mul(3, 1), mul(add(3, 10), -1))), mul(mul(mul(mul(ARG2, ARG1), add(ARG3, add(mul(3, 1), add(5, 0)))), 5), add(add(add(mul(1, 0), add(ARG2, 1)), mul(3, ARG0)), add(3, 10))))), mul(add(add(add(mul(100, 1), add(100, 1)), add(mul(-1, -1), mul(5, ARG2))), add(add(add(3, mul(add(0, -1), add(add(mul(-1, 1), ARG2), add(mul(3, add(100, -1)), add(add(1, 5), add(ARG1, 10)))))), add(ARG3, add(mul(mul(-1, -1), mul(-1, 5)), add(add(add(add(add(3, ARG1), mul(0, 3)), mul(mul(ARG0, 1), add(100, 100))), 3), mul(3, 1))))), add(ARG0, mul(mul(add(add(ARG3, 0), mul(1, 1)), 3), mul(-1, ARG1))))), mul(mul(add(add(-1, mul(mul(add(add(1, add(mul(add(ARG1, 1), mul(10, -1)), add(-1, 1))), mul(10, ARG2)), mul(add(ARG1, 3), mul(0, 0))), mul(mul(0, add(add(1, add(ARG0, 100)), mul(mul(mul(-1, ARG0), add(ARG3, ARG2)), mul(mul(ARG3, -1), add(10, ARG2))))), add(0, add(10, ARG0))))), mul(mul(add(ARG0, 1), add(ARG0, ARG3)), add(add(add(ARG1, add(add(mul(add(ARG1, ARG0), mul(5, 0)), add(add(100, ARG3), add(3, ARG3))), add(mul(ARG0, mul(ARG1, 10)), add(1, ARG1)))), add(add(mul(add(ARG3, 3), 5), ARG2), add(mul(mul(add(ARG3, 3), 5), add(100, -1)), add(add(1, 5), add(add(add(ARG2, 3), mul(10, ARG3)), 100))))), add(0, 100)))), 5), mul(mul(add(1, mul(add(5, ARG3), add(1, ARG3))), mul(5, 100)), add(ARG0, mul(ARG0, add(add(add(ARG2, 3), mul(10, ARG3)), 100)))))))), mul(add(5, 5), add(add(add(10, -1), add(10, ARG0)), mul(add(ARG2, ARG1), mul(mul(mul(mul(mul(ARG0, 100), add(ARG1, 10)), add(3, 10)), 5), add(add(add(0, 0), add(ARG0, 10)), mul(mul(100, 10), add(add(mul(-1, add(ARG3, mul(0, 3))), ARG2), add(mul(mul(add(ARG3, 3), 5), add(100, -1)), add(add(1, 5), add(add(add(ARG2, 3), mul(10, ARG3)), 100))))))))))), if_then_else(compare(mul(add(ARG0, add(mul(100, 100), mul(0, ARG0))), 5), add(mul(100, 10), mul(mul(add(add(add(ARG1, add(add(mul(add(ARG1, ARG0), mul(-1, 100)), add(add(100, add(mul(ARG0, mul(ARG1, 10)), add(1, ARG1))), add(mul(add(5, 10), add(1, ARG3)), ARG3))), mul(mul(add(ARG3, ARG0), add(1, ARG2)), add(mul(0, ARG0), mul(ARG2, ARG2))))), add(add(mul(-1, add(ARG3, mul(0, 3))), ARG2), add(mul(mul(add(ARG3, 3), 5), add(100, -1)), add(add(1, 5), add(add(add(ARG2, 3), mul(10, ARG3)), 100))))), add(add(10, -1), add(add(mul(ARG3, mul(mul(mul(ARG0, 10), mul(ARG1, ARG0)), mul(add(1, 1), add(ARG1, 10)))), mul(10, ARG1)), add(add(ARG2, 100), mul(1, ARG2))))), mul(5, 3)), add(add(add(ARG0, 1), add(1, ARG3)), mul(add(ARG1, 100), mul(ARG3, 0)))))), if_then_else(False, ret_evade, ret_evade), if_then_else(False, if_then_else(False, ret_evade, ret_evade), ret_evade)), ret_attack)

RANDOM_SEED = 120
INACTIV_STEPS_LIMIT = -1

averaged_plans = [254.8,0,781.6,0]
#plans = ["Rotace \nvlevlo", "Rotace \nvpravo", "Akcelerace", "Střela", "Rozdvojovací \nstřela", "Prázdná \nakce"]
plans = ["Útok", "Obrana", "Úhyb", "Zastavevní"]

plt.figure(figsize=(8,6))
plt.title("Průměrný počet kroků hry: 1266.3")
plt.suptitle("Výsledek: 2:10")